******************** BUSCOs README File ********************

A. Introduction
B. BUSCO set up
C. Running BUSCO analysis
D. Command line options:
E. Output files

March/2015
************************************************************
A. Introduction
------------------

BUSCO completeness assessment employs sets of Benchmarking Universal Single-Copy
Orthologs from OrthoDB (www.orthodb.org) to provide quantitative measures of the
completeness of genome assemblies, annotated gene sets, and transcriptomes in terms of
expected gene content. Genes that make up the BUSCO sets for each major lineage are selected
from orthologous groups with genes present as single-copy orthologs in at least 90% of the
species. While allowing for rare gene duplications or losses, this establishes an evolutionary
informed expectation that these genes should be found as single-copy orthologs in the genome
of any newly-sequenced species.

Usage of the BUSCO software requires a working installation of Python, HMMER 3.1, Blast+,
Augustus (genome assessment only) and EMBOSS transeq (transcriptome assessment only).
BUSCO genome assembly assessment first identifies candidate regions from the genome to be
assessed with tBLASTn searches using BUSCO consensus sequences. Gene structures are then
predicted using Augustus with BUSCO block profiles. Finally, these predicted genes, or all genes
from an annotated gene set or transcriptome, are assessed using HMMER and lineage- specific
BUSCO profiles to classify matc

***************************************

B. BUSCO set up
--------------------

The BUSCO distribution is released as a compressed archive file (BUSCO_v1.0.tar.gz) for
download. 

Extracting the files to your current directory "tar -zxvf BUSCO_v1.0.tar.gz will"
create the directory BUSCO, containing the required files.

Depending on the species you wish to assess, you should now download the appropriate lineage-
specific profile libraries: Metazoa (M), Eukaryota (E), Arthropoda (A), Vertebrata (V), Fungi (F),
or Bacteria (B) from http://buscos.ezlab.org to your BUSCO directory.

Before you begin, you will need to make sure that the following required software (some only
required for genome or transcriptome assessments) are installed and accessible from the
command-line, e.g. set environment variable PATH=$PATH:/path/to/software/bin

- NCBI BLAST+ 
http://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/

- HMMER (HMMER 3.1b) 
http://hmmer.janelia.org/

- Augustus 3.0.x  (Only required for genome analysis)
http://bioinf.uni-greifswald.de/augustus/
**Make sure that the environmental variable AUGUSTUS_CONFIG_PATH was set during installion
(e.g: export AUGUSTUS_CONFIG_PATH=/my_path_to_AUGUSTUS/augustus/config/)**


- EMBOSS tools 6.x.x (Transcriptome analysis only)
ftp://emboss.open-bio.org/pub/EMBOSS/

Please check that you have the correct version of the software above.
In case you are using a different version and encounter any problems,
please let us know.


***************************************

C. Running BUSCOs analysis
---------------

Before starting be sure that the necessary software is installed and accessible from the command-line. This can be accomplished by adding the necessary paths to your environmental variables (e.g. PATH=$PATH:/path/to/software/bin)

One last thing to do before running BUSCO

Choose and download library of lineage-specific BUSCO data (http://busco.ezlab.org), we recommend using the largest library possible for your species. Decompress it (e.g. tar -zxvf library.tar.gz) and make sure this directory accessible (i.e. move or symlink) from the directory where the analysis is being run. 

1- Running BUSCOs on a genome assembly:

python BUSCO_v1.0.py  -o NAME -in ASSEMBLY -l LINEAGE 

NAME                name to use for the run and temporary files.
ASSEMBLY            genome assembly file in fasta format.
LINEAGE             name of the BUSCOs lineage data to use (A,M,V,E,F).

2- Running BUSCOs on a genome assembly:

python BUSCO_v1.0.py  -o NAME -in GENE_SET -l LINEAGE -m OGS

NAME                name to use for the run and temporary files.
GENE_SET            gene set file in fasta format.
LINEAGE             name of the BUSCOs lineage data to use (A,M,V,E,F)

3- Running BUSCOs on a genome assembly:

python BUSCO_v1.0.py -o NAME -in TRANSCRIPTOME -l LINEAGE -m trans

NAME 		    name to use for the run and temporary files.
TRANSCRIPTOME       genome assembly file in fasta format.
LINEAGE       	    name of the BUSCOs lineage data to use (A,M,V,E,F).

***************************************

D. BUSCO options:
---------------


Mandatory arguments:
-o  abbreviation	Abbreviation used for naming output files.

-in  input_file	Input Genome assembly / Gene set / Transcriptome in fasta format.

-l  lineage		Name of the desired BUSCOs profile lineage to be used.

-m  mode		Mode of analysis (valid options are: genome, ogs, trans)   
			Default: genome

Optional arguments :

-h --help               Print help.

-c integer		Number of CPU threads to be used (Default: 1)

-sp species		Use this option to select from the pre-computed Augustus metaparameters. 
                        Selecting a closely related species usually results in more precise           
                        gene prediction, especially for highly fragmented genomes.
			Default: generic

-e evalue		Use a custom blast e-value cutoff. (Default: 0.01) 

-f                      Force rewriting of files from a pre-existing run, if a previous BUSCO 
                        run with the same name already exists in the current directory.

--flank N               Custom flank size in base pairs (bp) to be used when extending the selected 
                        candidate regions before gene prediction.. 
                        Default: Automatically calculate appropriate flanks based on genome size.
                        
--long			Performs full optimization for Augustus  gene finding training, involves 
                        multiple rounds of cross validation. Adds ~20 hours of runtime, but yields 
                        some gains in prediction sensitivity and specificity. Can be useful to 
                        obtain more accurate gene finding parameters before proceeding to full scale
                        genome annotation.
			Default: Off

***************************************

E. BUSCO Output
---------------

Successful execution of the BUSCO assessment pipeline will create a directory named
name_OUTPUT where ?name? is your assigned name for the assessment run. The directory will
contain several files and directories:

short_summary_		Contains a summary results in BUSCO notation and a brief breakdown of the metrics.

full_table_		Results in tabular format, contains coordinates and scores and lengths of BUSCO matches.

training_set_		Prepared set of o complete BUSCO matches for training Augustus. 
                        Only created during genome analysis.

_tblastn		Results in tabular format for the tblastn search using BUSCO consensus sequences.	

augustus_		Folder containg predicted genes and proteins. Only created during 
augutus_proteins	genome analysis.

selected		Folders containing complete BUSCO matches, used for training Augustus. 
gb			
gffs

hmmer_output		Folder containg the output in tabular format of HMMer searches against BUSCO HMMs.

***************************************

F. BUSCO set up test with sample data
-----------------------------------

Sample data are provided to test your BUSCO setup. Execute the following commands and
compare the final output ?run_SAMPLE? with the provided files in ?run_TEST?.

1 - Change directory to 'sample_data' - 

cd sample_data/

2 - Run BUSCO on sequence file "target.fa" on genome mode.

python BUSCO_v1.0.py -in target.fa -o SAMPLE -l example -m genome

3 - Compare the final output ?run_SAMPLE? with the provided files in ?run_TEST?.


***************************************
http://busco.ezlab.org